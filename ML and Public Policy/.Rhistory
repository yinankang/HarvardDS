?? box
?? data
color=c("salmon","orange","pink","powderblue","salmon2","peach puff")
awesomeness=c(9,7,4,3,NA,6)
barplot(awesomeness,names=color,col=color)
barplot(awesomeness)
barplot(awesomeness,col=color)
barplot(awesomeness,names=color)
barplot(awesomeness,names=color,col=color)
barplot(awesomeness,color)
shirts <- data.frame(color,awesomeness)
men = c(172.5, 175, 176, 177, 177, 178.5, 179, 179, 179.5, 180)
women = c(167, 168, 168.5, 170, 171, 175, 175, 176)
tmpNA = c(2,1,3,4,1,2,3,NA)
mean(tmpNA)
mean(tmpNA,na.rm=T)
library(modest)
color = c("salmon", "orange", "pink", "powderblue", "samlmon2", "peach puff")
awesomness = c(9,7,4,3,NA,6)
shirts=data.frame(color,awesomeness)
shirts
bear= matrix(data = c(2.00 , 2.17 , 2.57 , 3.40 ,
1.50 , 1.98 , 2.14 , 2.93 ,
2.75 , 3.02 , 4.44 , 4.46 ),
nrow = 3, ncol = 4, byrow=T)
cafeteria = matrix(c(0,0,0,1,1,0,1,1),nrow=4,ncol=2,byrow=T)
library = matrix(c(0,0,0,0,1,1,1,1), nrow=4, ncol=2, byrow=T)
classes = matrix(c(0,0,1,0,1,1,1,1),nrow=4,ncol=2,byrow=T)
students = array(data=c(cafeteria,library,classes),dim=c(4,2,3))
fear=c("scared","scared","courageous","scared","insane","courageous")
data=list(shirts=shirts,students=students,somerawdata=color)
data
table(shirts)
str(shirts)
shirts
shirts$hue
data$students
data
names(data)
class(data)
data[1]
data[[1]]
color
test_shirts = shirts$awesomeness>6
test_shirts
best_shirts=shirts[test_shirts,]
best_shirts
best_shirts[-3,]
save.image("~/PreludePractice.RData")
View(library)
rm(list = ls())
data = read.csv("athlete_events.csv")
data = read.csv("Downloads/athlete_events.csv")
cd
getwd
data = read.csv("Desktop/R Work/Olympics/athlete_events.csv")
view(data)
data
View(data)
plot(NOC~Medal)
plot(data$NOC ~ data$Medal)
china <- filter(data$Team = China)
load(dplyr)
library(dplyr)
install(dplyr)
install.packages("dplyr")
china <- filter(data$Team = China)
china <- filter(data$Team == "China")
?filter
library(dplyr)
china <- filter(data$Team == "China")
class(data$Team)
china <- filter(data$Team = "China")
china <- filter(data$Team = China)
china <- filter(data, data$Team == "China")
china
plot(china$Team)
plot(china$Height)
plot(china$Medal)
?plot
data[data == NA] <- 0
data[data == NA] <- 0
rm(ls)
rm(list = ls())
data = read.csv("Desktop/R Work/Olympics/athlete_events.csv")
librar(dplyr)
library(dplyr)
data[is.na(data)] <- 0
class(data$Medal)
data[is.na(data$Medal)] <- 0
mutate_all(funs(replace(., is.na(.), 0))))
mutate_all(funs(replace(., is.na(.), 0)))
rm(list = ls())
data = read.csv("Desktop/R Work/Olympics/athlete_events.csv")
library(dplyr)
View(data)
data$Medal[is.na(data$Medal)] <- 0
data = read.csv("Desktop/R Work/Olympics/athlete_events.csv", header = TRUE, stringsAsFactors = FALSE)
library(dplyr)
data$Medal[is.na(data$Medal)] <- 0
china <- filter(data, data$Team == 'China')
plot(china$Medal)
data$Medal[is.na(data$Medal)] <- "None"
china <- filter(data, data$Team == 'China')
plot(china$Medal)
data$Medal[is.0(data$Medal)] <- "None"
rm(list = ls())
data = read.csv("Desktop/R Work/Olympics/athlete_events.csv", header = TRUE, stringsAsFactors = FALSE)
library(dplyr)
data$Medal[is.0(data$Medal)] <- "None"
data$Medal[is.na(data$Medal)] <- "None"
china <- filter(data, data$Team == 'China')
plot(china$Medal)
hist(china$Medal)
class(data$Medal)
data$Medal <- as.factor(data$Medal)
china <- filter(data, data$Team == 'China')
hist(china$Medal)
plot(china$Medal)
df_crimeRate <- read.table(
url("http://www.stat.purdue.edu/~minzhang/525-Spring2018/Datasets_files/CH01PR28.txt"),
header=FALSE, sep="",
col.names=c("cr","ed"))
lmFit1_28 <- lm(cr~ed, data=df_crimeRate)
summary(lmFit1_28)
rm(list=ls())
df_crimeRate <- read.table(
url("http://www.stat.purdue.edu/~minzhang/525-Spring2018/Datasets_files/CH01PR28.txt"),
header=FALSE, sep="",
col.names=c("cr","ed"))
lmFit1_28 <- lm(cr~ed, data=df_crimeRate)
summary(lmFit1_28)
t <- coef(lmFit1_28)[2]/coef(summary(lmFit1_28))[2, "Std. Error"]
print(t)
coef(lmFit1_28)
coef(lmFit1_28)[2]
coef(summary(lmFit1_28))
summary(lmFit1_28)
coef(summary(lmFit1_28))
?pf
rm(list=ls())
monthly.income <- 3850
current.bank <- 2200
rent <- 1350
trans <- 900
food <- 350
stuff <- 200
c = current.bank-3300 + monthly.income-rent-trans-food-stuff
c
monthly.income <- 3850
current.bank <- 2200
rent <- 1350
trans <- 900
food <- 350
stuff <- 200
c = current.bank-3300 + 2(monthly.income-rent-trans-food-stuff)
monthly.income <- 3850
current.bank <- 2200
rent <- 1350
trans <- 900
food <- 350
stuff <- 200
c = current.bank-3300 + 2*(monthly.income-rent-trans-food-stuff)
c
monthly.income <- 3850
current.bank <- 2200
rent <- 1350
trans <- 900
food <- 350
stuff <- 200
c = current.bank-3300 + 2*(monthly.income-rent-trans-food-stuff) +850+2800
devtools::install_github("mlflow/mlflow", subdir = "mlflow/R/mlflow")
mlflow::install_mlflow()
install.packages('devtools')
devtools::install_github("mlflow/mlflow", subdir = "mlflow/R/mlflow")
require(mlflow)
library(mlflow)
install.packages('rlang')
install.packages("rlang")
library(mlflow)
install.packages("rlang")
install.packages("rlang")
library(mlflow)
mlflow_ui()
install_mlflow()
mlflow_ui()
install.packages("foreign", repos = "http://cran.us.r-project.org")
install.packages("RCurl", repos = "http://cran.us.r-project.org")
library(RCurl)
localdir = "Desktop ▸ ⁨Git⁩ ▸ ⁨HarvardDS⁩"
list.files(localdir) # What are the files in the local directory?
localdir = "Desktop/Git/HarvardDS⁩"
list.files(localdir) # What are the files in the local directory?
localdir = "Users/Yinan/Desktop/Git/HarvardDS⁩"
localdir = "Users/Yinan/Desktop/Git/HarvardDS⁩"
list.files(localdir) # What are the files in the local directory?
localdir = "iCloud Drive/Desktop/Git/HarvardDS⁩"
list.files(localdir) # What are the files in the local directory?
getwd()
localdir = "/Users/yinankang/Desktop/Git/HarvardDS⁩"
list.files(localdir) # What are the files in the local directory?
list.files(getwd())
setwd("Desktop")
list.files()
setwd("Git")
list.files()
setwd("HarvardDS")
list.files()
setwd("/Users/yinankang/Desktop/Git/HarvardDS/ML and Public Policy⁩)"
setwd("/Users/yinankang/Desktop/Git/HarvardDS/ML and Public Policy")
list.files() # What are the files in the local directory?
rm(list = ls()) # This cleans up the workspace
stop.frisk.df <- read.csv("~/Desktop/Git/HarvardDS/ML and Public Policy/stop-and-frisk2016.csv")
View(stop.frisk.df)
dim(stop.frisk.df)
head(stop.frisk.df)
attach(stop.frisk.df)
# Looking at individual columns
summary(arstmade)
mean(pct, na.rm = TRUE)
summary(race)
summary(race)/12405
table(arstmade)
nrow(arstmade)
arstmade$N / nrow(race)
arstmade / nrow(stop.frisk.df)
arstmade["N"]/ nrow(stop.frisk.df)
table(arstmade)/nrow(stop.frisk.df*100
)
table(arstmade)/nrow(stop.frisk.df) *100
# Looking at Age
View(age)
table(age)
class(age)
age <- as.numeric(age)
# Looking at Time Stop
summary(timestop)
mean(timestop)
# Looking at Time Stop
summary(timestop, na.rm = T)
mean(timestop, na.rm=T)
hist(timestop, main = "Time Stop Frequency")
# Let's first load the R packages and the data
library(bitops)
install.packages(c("bitops", "RCurl"))
# Let's first load the R packages and the data
library(bitops)
library(foreign)
library(RCurl)
stopandfrisk2016<-
read.csv(
text=getURL("https://raw.githubusercontent.com/ljanastas/WWS586A-Machine-Learning-Policy-Analysis/master/Data/stop-and-frisk2016.csv"),
header=T)
attach(stopandfrisk2016)
library(dplyr)
# Check what Races were recorded, and if any NA's exist
unique(race)
any(is.na(race))
# Subset those who were frisked and not frisked
f <- stopandfrisk2016[frisked=="Y",]
n <- stopandfrisk2016[frisked=="N",]
f.a <- nrow(f[f$race=="A",]) / nrow(f) * 100
f.b <- nrow(f[f$race=="B",]) / nrow(f) * 100
f.i <- nrow(f[f$race=="I",]) / nrow(f) * 100
f.p <- nrow(f[f$race=="P",]) / nrow(f) * 100
f.q <- nrow(f[f$race=="Q",]) / nrow(f) * 100
f.u <- nrow(f[f$race=="U",]) / nrow(f) * 100
f.w <- nrow(f[f$race=="W",]) / nrow(f) * 100
f.z <- nrow(f[f$race=="Z",]) / nrow(f) * 100
n.a <- nrow(n[n$race=="A",]) / nrow(n) * 100
n.b <- nrow(n[n$race=="B",]) / nrow(n) * 100
n.i <- nrow(n[n$race=="I",]) / nrow(n) * 100
n.p <- nrow(n[n$race=="P",]) / nrow(n) * 100
n.q <- nrow(n[n$race=="Q",]) / nrow(n) * 100
n.u <- nrow(n[n$race=="U",]) / nrow(n) * 100
n.w <- nrow(n[n$race=="W",]) / nrow(n) * 100
n.z <- nrow(n[n$race=="Z",]) / nrow(n) * 100
# Creating inputs for graphs
slices <- c(f.a,f.b,f.i,f.p,f.q,f.u,f.w,f.z)
lbls <- c("A","B","I","P","Q","U","W","Z")
# Setting up png export, and generating graphs
pie <- pie(slices,lbls, main = "Percent of Racial Group Frisked")
bar <- barplot(slices, names.arg = lbls, main = "Percent of Racial Group Frisked")
png("pie.png")
pie(slices,lbls, main = "Percent of Racial Group Frisked")
dev.off()
png("bar.png")
barplot(slices, names.arg = lbls, main = "Percent of Racial Group Frisked")
dev.off()
# YOUR CODE HERE
yesno<-function(oldvariable,newvariable,col){
if (any(oldvariable=="Y") == TRUE) {
for (i in (1:length(oldvariable))){
if (oldvariable[i] == "Y"){
newvariable[i,col+1] = "1"
}
if (oldvariable[i] == "N"){
newvariable[i,col+1] = "0"
}
if (oldvariable[i] == " "){
newvariable[i,col+1] = "NA"
}
else {(next())}
}
}
else{print('nope')}
return(newvariable)
}
recoded <- data.frame()
nope=0
for (j in 1:112){
if (is.factor(stopandfrisk2016[,j]) == TRUE){
recoded <- yesno(stopandfrisk2016[,j],recoded,ncol(recoded))
col.name <- colnames(stopandfrisk2016[j])
colnames(recoded)[ncol(recoded)] <- col.name
}
else {
nope <- nope + 1
print(nope)}
}
View(recoded)
colnames(stopandfrisk2016)
stopandfrisk2016$sb_hdobj
colnames(recoded)
View(recoded$build)
stopandfrisk2016$othfeatr
colnames(stopandfrisk2016)
for (j in 92:112){
if (is.factor(stopandfrisk2016[,j]) == TRUE){
recoded <- yesno(stopandfrisk2016[,j],recoded,ncol(recoded))
col.name <- colnames(stopandfrisk2016[j])
colnames(recoded)[ncol(recoded)] <- col.name
}
else {
nope <- nope + 1
print(nope)}
}
colnames(stopandfrisk2016)
# YOUR CODE HERE
model <- glm(frisked ~ timestop + pistol + race + sex + build, data = stopandfrisk2016, family = "binomial")
summary(model)
# Looking at odds ratio for 'timestop'
e^(5.49e-05)
# Looking at odds ratio for 'timestop'
exp(5.49e-05)
# Looking at odds ratio for 'raceB'
exp(3.316e-01)
# Building a model and looking at summary
model <- glm(frisked ~ timestop + pistol + race + sex + build, data = stopandfrisk2016, family = "binomial")
summary(model)
# Looking at odds ratio for 'raceB'
$exp(3.316e-01) $
attach(stopandfrisk2016)
library(dplyr)
# Check what Races were recorded, and if any NA's exist
unique(race)
any(is.na(race))
# Subset those who were frisked and not frisked
f <- stopandfrisk2016[frisked=="Y",]
n <- stopandfrisk2016[frisked=="N",]
f.a <- nrow(f[f$race=="A",]) / nrow(f) * 100
f.b <- nrow(f[f$race=="B",]) / nrow(f) * 100
f.i <- nrow(f[f$race=="I",]) / nrow(f) * 100
f.p <- nrow(f[f$race=="P",]) / nrow(f) * 100
f.q <- nrow(f[f$race=="Q",]) / nrow(f) * 100
f.u <- nrow(f[f$race=="U",]) / nrow(f) * 100
f.w <- nrow(f[f$race=="W",]) / nrow(f) * 100
f.z <- nrow(f[f$race=="Z",]) / nrow(f) * 100
n.a <- nrow(n[n$race=="A",]) / nrow(n) * 100
n.b <- nrow(n[n$race=="B",]) / nrow(n) * 100
n.i <- nrow(n[n$race=="I",]) / nrow(n) * 100
n.p <- nrow(n[n$race=="P",]) / nrow(n) * 100
n.q <- nrow(n[n$race=="Q",]) / nrow(n) * 100
n.u <- nrow(n[n$race=="U",]) / nrow(n) * 100
n.w <- nrow(n[n$race=="W",]) / nrow(n) * 100
n.z <- nrow(n[n$race=="Z",]) / nrow(n) * 100
